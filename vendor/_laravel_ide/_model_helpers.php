<?php

namespace App\Models {

	/**
	 * App\Models\Account
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property mixed $is_Default
	 * @property string $bank_add
	 * @property string $ifsc
	 * @property string $branch
	 * @property string $bank_name
	 * @property mixed $account_no
	 * @property string $account_holder_add
	 * @property string $account_holder_name
	 * @property string $account_name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account whereAccountName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account whereAccountHolderName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account whereAccountHolderAdd($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account whereAccountNo($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account whereBankName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account whereBranch($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account whereIfsc($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account whereBankAdd($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account whereIsDefault($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Account>|Account query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Account extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\AttributeDetail
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeDetail>|AttributeDetail whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeDetail>|AttributeDetail whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeDetail>|AttributeDetail whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeDetail>|AttributeDetail whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeDetail>|AttributeDetail whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeDetail>|AttributeDetail whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeDetail>|AttributeDetail newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeDetail>|AttributeDetail newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeDetail>|AttributeDetail query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AttributeDetail extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\AttributeValue
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $name
	 * @property mixed $attr_val_id
	 * @property int $id
	 * @property-read \App\Models\AttributeDetail $attribute
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ModelDetail> $models
	 * @property-read int|null $models_count
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeValue>|AttributeValue whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeValue>|AttributeValue whereAttrValId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeValue>|AttributeValue whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeValue>|AttributeValue whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeValue>|AttributeValue whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeValue>|AttributeValue whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeValue>|AttributeValue whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeValue>|AttributeValue newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeValue>|AttributeValue newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<AttributeValue>|AttributeValue query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class AttributeValue extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Buyer
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $buyer_name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereBuyerName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Buyer>|Buyer query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Buyer extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Calculation
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property mixed $quantity
	 * @property float $payable
	 * @property float $advance
	 * @property float $round_off
	 * @property float $total
	 * @property float $tax2_amount
	 * @property float $tax_type2_value
	 * @property string|null $tax_type2
	 * @property float $tax1_amount
	 * @property float $tax_type1_value
	 * @property string|null $tax_type1
	 * @property mixed $taxable_amount
	 * @property float $discount
	 * @property float $packing
	 * @property float $net_amount
	 * @property string|null $inward_date
	 * @property string|null $contact_perso_phone
	 * @property string|null $contact_person
	 * @property float|null $currency
	 * @property mixed $vendor_id
	 * @property mixed $consignee_id
	 * @property mixed $buyer_id
	 * @property string|null $duty_paid_date
	 * @property string|null $po_date
	 * @property string|null $po_no
	 * @property mixed $financial_year
	 * @property mixed $company_id
	 * @property string $invoice_date
	 * @property string $invoice_number
	 * @property int $id
	 * @property-read \App\Models\Vendor $vendor
	 * @property-read \App\Models\Buyer $buyer
	 * @property-read \App\Models\ConsigneeName $consignee
	 * @property-read \App\Models\FinancialYear $financialYear
	 * @property-read \App\Models\CompanyDetail $companyDetail
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\PurchaseInvoice> $purchaseInvoice
	 * @property-read int|null $purchaseInvoice_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereInvoiceNumber($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereInvoiceDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereCompanyId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereFinancialYear($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation wherePoNo($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation wherePoDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereDutyPaidDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereBuyerId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereConsigneeId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereVendorId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereCurrency($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereContactPerson($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereContactPersoPhone($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereInwardDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereNetAmount($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation wherePacking($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereDiscount($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereTaxableAmount($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereTaxType1($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereTaxType1Value($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereTax1Amount($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereTaxType2($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereTaxType2Value($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereTax2Amount($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereTotal($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereRoundOff($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereAdvance($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation wherePayable($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereQuantity($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Calculation>|Calculation query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Calculation extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Client
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $updated_by
	 * @property mixed $created_by
	 * @property string $name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Client extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ClientContactPerson
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $email_2
	 * @property string $email_1
	 * @property mixed $contact_2
	 * @property mixed $contact_1
	 * @property string $designation
	 * @property string $name
	 * @property mixed $client_details_id
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientContactPerson>|ClientContactPerson whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientContactPerson>|ClientContactPerson whereClientDetailsId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientContactPerson>|ClientContactPerson whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientContactPerson>|ClientContactPerson whereDesignation($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientContactPerson>|ClientContactPerson whereContact1($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientContactPerson>|ClientContactPerson whereContact2($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientContactPerson>|ClientContactPerson whereEmail1($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientContactPerson>|ClientContactPerson whereEmail2($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientContactPerson>|ClientContactPerson whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientContactPerson>|ClientContactPerson whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientContactPerson>|ClientContactPerson newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientContactPerson>|ClientContactPerson newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientContactPerson>|ClientContactPerson query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ClientContactPerson extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ClientType
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $updated_by
	 * @property mixed $created_by
	 * @property string $name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientType>|ClientType whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientType>|ClientType whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientType>|ClientType whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientType>|ClientType whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientType>|ClientType whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientType>|ClientType whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientType>|ClientType newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientType>|ClientType newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ClientType>|ClientType query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ClientType extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\CompanyDetail
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string|null $sale_invoice
	 * @property string|null $license_no1
	 * @property string|null $license_no
	 * @property string|null $subject_jur
	 * @property string|null $service_tax
	 * @property string|null $pt_no
	 * @property string|null $cst_tin_date
	 * @property string|null $cst_tin
	 * @property string|null $pan_no
	 * @property string|null $vat_tin_date
	 * @property string|null $vat_tin
	 * @property string|null $state
	 * @property string|null $web_address
	 * @property string|null $country
	 * @property string|null $fax
	 * @property string|null $city
	 * @property string|null $address
	 * @property string|null $email_id1
	 * @property string|null $email_id
	 * @property string|null $company_prefix
	 * @property string|null $print_as1
	 * @property string|null $print_as
	 * @property string|null $contact_num1
	 * @property string|null $contact_num
	 * @property string|null $company_name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereCompanyName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereContactNum($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereContactNum1($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail wherePrintAs($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail wherePrintAs1($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereCompanyPrefix($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereEmailId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereEmailId1($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereAddress($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereCity($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereFax($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereCountry($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereWebAddress($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereState($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereVatTin($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereVatTinDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail wherePanNo($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereCstTin($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereCstTinDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail wherePtNo($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereServiceTax($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereSubjectJur($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereLicenseNo($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereLicenseNo1($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereSaleInvoice($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<CompanyDetail>|CompanyDetail query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class CompanyDetail extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ConsigneeName
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<ConsigneeName>|ConsigneeName whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ConsigneeName>|ConsigneeName whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ConsigneeName>|ConsigneeName whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ConsigneeName>|ConsigneeName whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ConsigneeName>|ConsigneeName whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ConsigneeName>|ConsigneeName whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ConsigneeName>|ConsigneeName newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ConsigneeName>|ConsigneeName newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ConsigneeName>|ConsigneeName query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ConsigneeName extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Currency
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $symbol
	 * @property mixed $is_Default
	 * @property mixed $value
	 * @property string $currency_name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereCurrencyName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereValue($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereIsDefault($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereSymbol($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Currency>|Currency query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Currency extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Designation
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $designation
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<Designation>|Designation whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Designation>|Designation whereDesignation($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Designation>|Designation whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Designation>|Designation whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Designation>|Designation whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Designation>|Designation whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Designation>|Designation newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Designation>|Designation newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Designation>|Designation query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Designation extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ExpenseType
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $expense
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<ExpenseType>|ExpenseType whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExpenseType>|ExpenseType whereExpense($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExpenseType>|ExpenseType whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExpenseType>|ExpenseType whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExpenseType>|ExpenseType whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExpenseType>|ExpenseType whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ExpenseType>|ExpenseType newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ExpenseType>|ExpenseType newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ExpenseType>|ExpenseType query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ExpenseType extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\FinancialYear
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property mixed $is_Default
	 * @property string $description
	 * @property string $to_date
	 * @property string $from_date
	 * @property string $financial_year
	 * @property int $id
	 * @property-read \App\Models\LUT $lut
	 * @method static \Illuminate\Database\Eloquent\Builder<FinancialYear>|FinancialYear whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FinancialYear>|FinancialYear whereFinancialYear($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FinancialYear>|FinancialYear whereFromDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FinancialYear>|FinancialYear whereToDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FinancialYear>|FinancialYear whereDescription($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FinancialYear>|FinancialYear whereIsDefault($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FinancialYear>|FinancialYear whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FinancialYear>|FinancialYear whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FinancialYear>|FinancialYear whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FinancialYear>|FinancialYear whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<FinancialYear>|FinancialYear newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<FinancialYear>|FinancialYear newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<FinancialYear>|FinancialYear query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class FinancialYear extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\InvoiceType
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $unstamp_description
	 * @property string $stamp_description
	 * @property string $invoice_type
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<InvoiceType>|InvoiceType whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InvoiceType>|InvoiceType whereInvoiceType($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InvoiceType>|InvoiceType whereStampDescription($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InvoiceType>|InvoiceType whereUnstampDescription($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InvoiceType>|InvoiceType whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InvoiceType>|InvoiceType whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InvoiceType>|InvoiceType whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InvoiceType>|InvoiceType whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InvoiceType>|InvoiceType newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<InvoiceType>|InvoiceType newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<InvoiceType>|InvoiceType query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class InvoiceType extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\LUT
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $LUT_note
	 * @property string $LUT_number
	 * @property string $financial_year_id
	 * @property int $id
	 * @property-read \App\Models\FinancialYear $financialYear
	 * @method static \Illuminate\Database\Eloquent\Builder<LUT>|LUT whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LUT>|LUT whereFinancialYearId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LUT>|LUT whereLutNumber($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LUT>|LUT whereLutNote($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LUT>|LUT whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LUT>|LUT whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LUT>|LUT whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LUT>|LUT whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<LUT>|LUT newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<LUT>|LUT newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<LUT>|LUT query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class LUT extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Location
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $updated_by
	 * @property mixed $created_by
	 * @property string $name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Location>|Location query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Location extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ModelDetail
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property mixed $attr_val_id
	 * @property mixed $attr_details_id
	 * @property string $reliance_item_code
	 * @property mixed $available_stock
	 * @property string $code
	 * @property string $type_of_code
	 * @property string $model_name
	 * @property mixed $make_id
	 * @property int $id
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\AttributeValue> $attributeValues
	 * @property-read int|null $attributeValues_count
	 * @property-read \App\Models\make $make
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail whereMakeId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail whereModelName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail whereTypeOfCode($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail whereCode($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail whereAvailableStock($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail whereRelianceItemCode($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail whereAttrDetailsId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail whereAttrValId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ModelDetail>|ModelDetail query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ModelDetail extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\POEntry
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property float $priceINR
	 * @property float $total
	 * @property mixed $price
	 * @property mixed $quantity
	 * @property mixed $model_id
	 * @property mixed $make_id
	 * @property mixed $po_id
	 * @property int $id
	 * @property-read \App\Models\POEntry $PoDetails
	 * @method static \Illuminate\Database\Eloquent\Builder<POEntry>|POEntry whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<POEntry>|POEntry wherePoId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<POEntry>|POEntry whereMakeId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<POEntry>|POEntry whereModelId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<POEntry>|POEntry whereQuantity($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<POEntry>|POEntry wherePrice($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<POEntry>|POEntry whereTotal($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<POEntry>|POEntry wherePriceinr($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<POEntry>|POEntry whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<POEntry>|POEntry whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<POEntry>|POEntry whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<POEntry>|POEntry whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<POEntry>|POEntry newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<POEntry>|POEntry newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<POEntry>|POEntry query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class POEntry extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Page
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $page
	 * @property int $id
	 * @property-read \App\Models\ReportType $report_type
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page wherePage($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Page>|Page query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Page extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\PoDetail
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property float $priceINR
	 * @property mixed $price
	 * @property float $total
	 * @property mixed $currency_id
	 * @property mixed $quantity
	 * @property mixed $vendor_id
	 * @property string $po_date
	 * @property string $po_no
	 * @property mixed $financial_year_id
	 * @property mixed $contact_person_id
	 * @property mixed $company_id
	 * @property int $id
	 * @property-read \App\Models\FinancialYear $financialYear
	 * @property-read \App\Models\CompanyDetail $companyDetail
	 * @property-read \App\Models\Vendor $vendor
	 * @property-read \App\Models\VednorContactPerson $contactPersons
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\POEntry> $poEntry
	 * @property-read int|null $poEntry_count
	 * @property-read \App\Models\Currency $currency
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail whereCompanyId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail whereContactPersonId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail whereFinancialYearId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail wherePoNo($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail wherePoDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail whereVendorId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail whereQuantity($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail whereCurrencyId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail whereTotal($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail wherePrice($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail wherePriceinr($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PoDetail>|PoDetail query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class PoDetail extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\PurchaseInvoice
	 *
	 * @property mixed $cal_id
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property float $price_in_INR
	 * @property string|null $total
	 * @property float $price
	 * @property string|null $stock_location
	 * @property string|null $description
	 * @property string|null $condition
	 * @property string|null $vc_date
	 * @property string|null $vc_no
	 * @property mixed $stamp
	 * @property string|null $HSN_value
	 * @property string|null $HSN_code
	 * @property string|null $serial_number
	 * @property mixed $product_id
	 * @property mixed $currency_value_id
	 * @property mixed $currency_id
	 * @property mixed $contact_person
	 * @property mixed $vendor_id
	 * @property string|null $inward_date
	 * @property mixed $consignee_id
	 * @property mixed $buyer_id
	 * @property string|null $duty_paid_date
	 * @property string|null $po_date
	 * @property string|null $po_number
	 * @property string|null $invoice_date
	 * @property string|null $invoice_number
	 * @property mixed $financial_year_id
	 * @property mixed $company_id
	 * @property mixed $calculation_id
	 * @property int $id
	 * @property-read \App\Models\Vendor $vendor
	 * @property-read \App\Models\Buyer $buyer
	 * @property-read \App\Models\ConsigneeName $consignee
	 * @property-read \App\Models\FinancialYear $financialYear
	 * @property-read \App\Models\CompanyDetail $companyDetail
	 * @property-read \App\Models\Calculation $calculation
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereCalculationId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereCompanyId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereFinancialYearId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereInvoiceNumber($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereInvoiceDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice wherePoNumber($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice wherePoDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereDutyPaidDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereBuyerId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereConsigneeId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereInwardDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereVendorId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereContactPerson($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereCurrencyId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereCurrencyValueId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereProductId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereSerialNumber($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereHsnCode($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereHsnValue($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereStamp($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereVcNo($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereVcDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereCondition($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereDescription($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereStockLocation($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice wherePrice($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereTotal($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice wherePriceInInr($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice whereCalId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchaseInvoice>|PurchaseInvoice query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class PurchaseInvoice extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\PurchasePayment
	 *
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchasePayment>|PurchasePayment newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchasePayment>|PurchasePayment newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<PurchasePayment>|PurchasePayment query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class PurchasePayment extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Quarter
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $to_date
	 * @property string $from_date
	 * @property string $quarter_name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<Quarter>|Quarter whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Quarter>|Quarter whereQuarterName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Quarter>|Quarter whereFromDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Quarter>|Quarter whereToDate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Quarter>|Quarter whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Quarter>|Quarter whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Quarter>|Quarter whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Quarter>|Quarter whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Quarter>|Quarter newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Quarter>|Quarter newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Quarter>|Quarter query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Quarter extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ReferenceEntry
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $address
	 * @property string $dob
	 * @property string $email2
	 * @property string $email1
	 * @property mixed $contact_number2
	 * @property mixed $contact_number1
	 * @property string $gender
	 * @property string $name
	 * @property string $title
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry whereTitle($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry whereGender($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry whereContactNumber1($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry whereContactNumber2($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry whereEmail1($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry whereEmail2($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry whereDob($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry whereAddress($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ReferenceEntry>|ReferenceEntry query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ReferenceEntry extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Reminder
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $reminder_value
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<Reminder>|Reminder whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Reminder>|Reminder whereReminderValue($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Reminder>|Reminder whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Reminder>|Reminder whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Reminder>|Reminder whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Reminder>|Reminder whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Reminder>|Reminder newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Reminder>|Reminder newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Reminder>|Reminder query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Reminder extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\ReportType
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $page_id
	 * @property string $report_type
	 * @property int $id
	 * @property-read \App\Models\Page $pages
	 * @method static \Illuminate\Database\Eloquent\Builder<ReportType>|ReportType whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReportType>|ReportType whereReportType($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReportType>|ReportType wherePageId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReportType>|ReportType whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReportType>|ReportType whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReportType>|ReportType whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReportType>|ReportType whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<ReportType>|ReportType newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ReportType>|ReportType newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<ReportType>|ReportType query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class ReportType extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Role
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $guard_name
	 * @property string $name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereGuardName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Role extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\StockLocation
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $location_name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<StockLocation>|StockLocation whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StockLocation>|StockLocation whereLocationName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StockLocation>|StockLocation whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StockLocation>|StockLocation whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StockLocation>|StockLocation whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StockLocation>|StockLocation whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<StockLocation>|StockLocation newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<StockLocation>|StockLocation newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<StockLocation>|StockLocation query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class StockLocation extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Tax
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property mixed $status
	 * @property mixed $tax_value
	 * @property string $tax_name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereTaxName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereTaxValue($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereStatus($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Tax>|Tax query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Tax extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\User
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string|null $role_id
	 * @property string $is_Active
	 * @property string $password
	 * @property string|null $email_verified_at
	 * @property string $email
	 * @property string $name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmail($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmailVerifiedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePassword($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIsActive($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRoleId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<User>|User query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class User extends \Illuminate\Foundation\Auth\User
	{
		//
	}

	/**
	 * App\Models\VednorContactPerson
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string|null $email2
	 * @property string|null $email1
	 * @property string|null $contact2
	 * @property string|null $contact1
	 * @property string|null $designation
	 * @property string|null $name
	 * @property mixed $vendor_id
	 * @property int $id
	 * @property-read \App\Models\Vendor $vendor
	 * @method static \Illuminate\Database\Eloquent\Builder<VednorContactPerson>|VednorContactPerson whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VednorContactPerson>|VednorContactPerson whereVendorId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VednorContactPerson>|VednorContactPerson whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VednorContactPerson>|VednorContactPerson whereDesignation($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VednorContactPerson>|VednorContactPerson whereContact1($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VednorContactPerson>|VednorContactPerson whereContact2($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VednorContactPerson>|VednorContactPerson whereEmail1($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VednorContactPerson>|VednorContactPerson whereEmail2($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VednorContactPerson>|VednorContactPerson whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VednorContactPerson>|VednorContactPerson whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<VednorContactPerson>|VednorContactPerson newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<VednorContactPerson>|VednorContactPerson newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<VednorContactPerson>|VednorContactPerson query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class VednorContactPerson extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Vendor
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property mixed $balance
	 * @property string|null $bank_branch_name
	 * @property string|null $bank_ifsc_code
	 * @property string|null $bank_account_no
	 * @property string|null $bank_add
	 * @property string|null $bank_name
	 * @property string|null $service_tax_no
	 * @property string|null $cst_tin_no_2
	 * @property string|null $cst_tin_no_1
	 * @property string|null $vat_tin_no_2
	 * @property string|null $vat_tin_no_1
	 * @property string|null $gst_no
	 * @property string|null $pan_no
	 * @property string|null $web_address
	 * @property string|null $email_id_2
	 * @property string|null $email_id_1
	 * @property string|null $phone2
	 * @property string|null $phone1
	 * @property string|null $address
	 * @property string $print_name_as
	 * @property string $name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor wherePrintNameAs($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereAddress($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor wherePhone1($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor wherePhone2($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereEmailId1($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereEmailId2($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereWebAddress($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor wherePanNo($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereGstNo($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereVatTinNo1($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereVatTinNo2($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereCstTinNo1($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereCstTinNo2($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereServiceTaxNo($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereBankName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereBankAdd($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereBankAccountNo($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereBankIfscCode($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereBankBranchName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereBalance($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Vendor>|Vendor query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Vendor extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Zone
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property string $name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Zone>|Zone query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Zone extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\make
	 *
	 * @property mixed $updated_by
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property mixed $created_by
	 * @property mixed $calculate_incentive
	 * @property string|null $note
	 * @property string $name
	 * @property int $id
	 * @method static \Illuminate\Database\Eloquent\Builder<make>|make whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<make>|make whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<make>|make whereNote($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<make>|make whereCalculateIncentive($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<make>|make whereCreatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<make>|make whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<make>|make whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<make>|make whereUpdatedBy($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<make>|make newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<make>|make newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<make>|make query()
	 * @method static mixed select($columns)
	 * @method static mixed selectSub($query, $as)
	 * @method static mixed selectRaw($expression, array $bindings)
	 * @method static mixed fromSub($query, $as)
	 * @method static mixed fromRaw($expression, $bindings)
	 * @method static mixed createSub($query)
	 * @method static mixed parseSub($query)
	 * @method static mixed prependDatabaseNameIfCrossDatabaseQuery($query)
	 * @method static mixed addSelect($column)
	 * @method static mixed distinct()
	 * @method static mixed from($table, $as)
	 * @method static mixed useIndex($index)
	 * @method static mixed forceIndex($index)
	 * @method static mixed ignoreIndex($index)
	 * @method static mixed join($table, $first, $operator, $second, $type, $where)
	 * @method static mixed joinWhere($table, $first, $operator, $second, $type)
	 * @method static mixed joinSub($query, $as, $first, $operator, $second, $type, $where)
	 * @method static mixed joinLateral($query, string $as, string $type)
	 * @method static mixed leftJoinLateral($query, string $as)
	 * @method static mixed leftJoin($table, $first, $operator, $second)
	 * @method static mixed leftJoinWhere($table, $first, $operator, $second)
	 * @method static mixed leftJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed rightJoin($table, $first, $operator, $second)
	 * @method static mixed rightJoinWhere($table, $first, $operator, $second)
	 * @method static mixed rightJoinSub($query, $as, $first, $operator, $second)
	 * @method static mixed crossJoin($table, $first, $operator, $second)
	 * @method static mixed crossJoinSub($query, $as)
	 * @method static mixed newJoinClause(self $parentQuery, $type, $table)
	 * @method static mixed newJoinLateralClause(self $parentQuery, $type, $table)
	 * @method static mixed mergeWheres($wheres, $bindings)
	 * @method static mixed where($column, $operator, $value, $boolean)
	 * @method static mixed addArrayOfWheres($column, $boolean, $method)
	 * @method static mixed prepareValueAndOperator($value, $operator, $useDefault)
	 * @method static mixed invalidOperatorAndValue($operator, $value)
	 * @method static mixed invalidOperator($operator)
	 * @method static mixed isBitwiseOperator($operator)
	 * @method static mixed orWhere($column, $operator, $value)
	 * @method static mixed whereNot($column, $operator, $value, $boolean)
	 * @method static mixed orWhereNot($column, $operator, $value)
	 * @method static mixed whereColumn($first, $operator, $second, $boolean)
	 * @method static mixed orWhereColumn($first, $operator, $second)
	 * @method static mixed whereRaw($sql, $bindings, $boolean)
	 * @method static mixed orWhereRaw($sql, $bindings)
	 * @method static mixed whereLike($column, $value, $caseSensitive, $boolean, $not)
	 * @method static mixed orWhereLike($column, $value, $caseSensitive)
	 * @method static mixed whereNotLike($column, $value, $caseSensitive, $boolean)
	 * @method static mixed orWhereNotLike($column, $value, $caseSensitive)
	 * @method static mixed whereIn($column, $values, $boolean, $not)
	 * @method static mixed orWhereIn($column, $values)
	 * @method static mixed whereNotIn($column, $values, $boolean)
	 * @method static mixed orWhereNotIn($column, $values)
	 * @method static mixed whereIntegerInRaw($column, $values, $boolean, $not)
	 * @method static mixed orWhereIntegerInRaw($column, $values)
	 * @method static mixed whereIntegerNotInRaw($column, $values, $boolean)
	 * @method static mixed orWhereIntegerNotInRaw($column, $values)
	 * @method static mixed whereNull($columns, $boolean, $not)
	 * @method static mixed orWhereNull($column)
	 * @method static mixed whereNotNull($columns, $boolean)
	 * @method static mixed whereBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed whereBetweenColumns($column, array $values, $boolean, $not)
	 * @method static mixed orWhereBetween($column, iterable $values)
	 * @method static mixed orWhereBetweenColumns($column, array $values)
	 * @method static mixed whereNotBetween($column, iterable $values, $boolean)
	 * @method static mixed whereNotBetweenColumns($column, array $values, $boolean)
	 * @method static mixed orWhereNotBetween($column, iterable $values)
	 * @method static mixed orWhereNotBetweenColumns($column, array $values)
	 * @method static mixed orWhereNotNull($column)
	 * @method static mixed whereDate($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDate($column, $operator, $value)
	 * @method static mixed whereTime($column, $operator, $value, $boolean)
	 * @method static mixed orWhereTime($column, $operator, $value)
	 * @method static mixed whereDay($column, $operator, $value, $boolean)
	 * @method static mixed orWhereDay($column, $operator, $value)
	 * @method static mixed whereMonth($column, $operator, $value, $boolean)
	 * @method static mixed orWhereMonth($column, $operator, $value)
	 * @method static mixed whereYear($column, $operator, $value, $boolean)
	 * @method static mixed orWhereYear($column, $operator, $value)
	 * @method static mixed addDateBasedWhere($type, $column, $operator, $value, $boolean)
	 * @method static mixed whereNested(Closure $callback, $boolean)
	 * @method static mixed forNestedWhere()
	 * @method static mixed addNestedWhereQuery($query, $boolean)
	 * @method static mixed whereSub($column, $operator, $callback, $boolean)
	 * @method static mixed whereExists($callback, $boolean, $not)
	 * @method static mixed orWhereExists($callback, $not)
	 * @method static mixed whereNotExists($callback, $boolean)
	 * @method static mixed orWhereNotExists($callback)
	 * @method static mixed addWhereExistsQuery(self $query, $boolean, $not)
	 * @method static mixed whereRowValues($columns, $operator, $values, $boolean)
	 * @method static mixed orWhereRowValues($columns, $operator, $values)
	 * @method static mixed whereJsonContains($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonContains($column, $value)
	 * @method static mixed whereJsonDoesntContain($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntContain($column, $value)
	 * @method static mixed whereJsonOverlaps($column, $value, $boolean, $not)
	 * @method static mixed orWhereJsonOverlaps($column, $value)
	 * @method static mixed whereJsonDoesntOverlap($column, $value, $boolean)
	 * @method static mixed orWhereJsonDoesntOverlap($column, $value)
	 * @method static mixed whereJsonContainsKey($column, $boolean, $not)
	 * @method static mixed orWhereJsonContainsKey($column)
	 * @method static mixed whereJsonDoesntContainKey($column, $boolean)
	 * @method static mixed orWhereJsonDoesntContainKey($column)
	 * @method static mixed whereJsonLength($column, $operator, $value, $boolean)
	 * @method static mixed orWhereJsonLength($column, $operator, $value)
	 * @method static mixed dynamicWhere($method, $parameters)
	 * @method static mixed addDynamic($segment, $connector, $parameters, $index)
	 * @method static mixed whereFullText($columns, $value, array $options, $boolean)
	 * @method static mixed orWhereFullText($columns, $value, array $options)
	 * @method static mixed whereAll($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAll($columns, $operator, $value)
	 * @method static mixed whereAny($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereAny($columns, $operator, $value)
	 * @method static mixed whereNone($columns, $operator, $value, $boolean)
	 * @method static mixed orWhereNone($columns, $operator, $value)
	 * @method static mixed groupBy($groups)
	 * @method static mixed groupByRaw($sql, array $bindings)
	 * @method static mixed having($column, $operator, $value, $boolean)
	 * @method static mixed orHaving($column, $operator, $value)
	 * @method static mixed havingNested(Closure $callback, $boolean)
	 * @method static mixed addNestedHavingQuery($query, $boolean)
	 * @method static mixed havingNull($columns, $boolean, $not)
	 * @method static mixed orHavingNull($column)
	 * @method static mixed havingNotNull($columns, $boolean)
	 * @method static mixed orHavingNotNull($column)
	 * @method static mixed havingBetween($column, iterable $values, $boolean, $not)
	 * @method static mixed havingRaw($sql, array $bindings, $boolean)
	 * @method static mixed orHavingRaw($sql, array $bindings)
	 * @method static mixed orderBy($column, $direction)
	 * @method static mixed orderByDesc($column)
	 * @method static mixed latest($column)
	 * @method static mixed oldest($column)
	 * @method static mixed inRandomOrder($seed)
	 * @method static mixed orderByRaw($sql, $bindings)
	 * @method static mixed skip($value)
	 * @method static mixed offset($value)
	 * @method static mixed take($value)
	 * @method static mixed limit($value)
	 * @method static mixed groupLimit($value, $column)
	 * @method static mixed forPage($page, $perPage)
	 * @method static mixed forPageBeforeId($perPage, $lastId, $column)
	 * @method static mixed forPageAfterId($perPage, $lastId, $column)
	 * @method static mixed reorder($column, $direction)
	 * @method static mixed removeExistingOrdersFor($column)
	 * @method static mixed union($query, $all)
	 * @method static mixed unionAll($query)
	 * @method static mixed lock($value)
	 * @method static mixed lockForUpdate()
	 * @method static mixed sharedLock()
	 * @method static mixed beforeQuery(callable $callback)
	 * @method static mixed applyBeforeQueryCallbacks()
	 * @method static mixed afterQuery(Closure $callback)
	 * @method static mixed applyAfterQueryCallbacks($result)
	 * @method static mixed toSql()
	 * @method static mixed toRawSql()
	 * @method static mixed find($id, $columns)
	 * @method static mixed findOr($id, $columns, Closure $callback)
	 * @method static mixed value($column)
	 * @method static mixed rawValue(string $expression, array $bindings)
	 * @method static mixed soleValue($column)
	 * @method static mixed get($columns)
	 * @method static mixed runSelect()
	 * @method static mixed withoutGroupLimitKeys($items)
	 * @method static mixed paginate($perPage, $columns, $pageName, $page, $total)
	 * @method static mixed simplePaginate($perPage, $columns, $pageName, $page)
	 * @method static mixed cursorPaginate($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed ensureOrderForCursorPagination($shouldReverse)
	 * @method static mixed getCountForPagination($columns)
	 * @method static mixed runPaginationCountQuery($columns)
	 * @method static mixed cloneForPaginationCount()
	 * @method static mixed withoutSelectAliases(array $columns)
	 * @method static mixed cursor()
	 * @method static mixed enforceOrderBy()
	 * @method static mixed pluck($column, $key)
	 * @method static mixed stripTableForPluck($column)
	 * @method static mixed pluckFromObjectColumn($queryResult, $column, $key)
	 * @method static mixed pluckFromArrayColumn($queryResult, $column, $key)
	 * @method static mixed implode($column, $glue)
	 * @method static mixed exists()
	 * @method static mixed doesntExist()
	 * @method static mixed existsOr(Closure $callback)
	 * @method static mixed doesntExistOr(Closure $callback)
	 * @method static mixed count($columns)
	 * @method static mixed min($column)
	 * @method static mixed max($column)
	 * @method static mixed sum($column)
	 * @method static mixed avg($column)
	 * @method static mixed average($column)
	 * @method static mixed aggregate($function, $columns)
	 * @method static mixed numericAggregate($function, $columns)
	 * @method static mixed setAggregate($function, $columns)
	 * @method static mixed onceWithColumns($columns, $callback)
	 * @method static mixed insert(array $values)
	 * @method static mixed insertOrIgnore(array $values)
	 * @method static mixed insertGetId(array $values, $sequence)
	 * @method static mixed insertUsing(array $columns, $query)
	 * @method static mixed insertOrIgnoreUsing(array $columns, $query)
	 * @method static mixed update(array $values)
	 * @method static mixed updateFrom(array $values)
	 * @method static mixed updateOrInsert(array $attributes, callable|array $values)
	 * @method static mixed upsert(array $values, $uniqueBy, $update)
	 * @method static mixed increment($column, $amount, array $extra)
	 * @method static mixed incrementEach(array $columns, array $extra)
	 * @method static mixed decrement($column, $amount, array $extra)
	 * @method static mixed decrementEach(array $columns, array $extra)
	 * @method static mixed delete($id)
	 * @method static mixed truncate()
	 * @method static mixed newQuery()
	 * @method static mixed forSubQuery()
	 * @method static mixed getColumns()
	 * @method static mixed raw($value)
	 * @method static mixed getUnionBuilders()
	 * @method static mixed getBindings()
	 * @method static mixed getRawBindings()
	 * @method static mixed setBindings(array $bindings, $type)
	 * @method static mixed addBinding($value, $type)
	 * @method static mixed castBinding($value)
	 * @method static mixed mergeBindings(self $query)
	 * @method static mixed cleanBindings(array $bindings)
	 * @method static mixed flattenValue($value)
	 * @method static mixed defaultKeyName()
	 * @method static mixed getConnection()
	 * @method static mixed getProcessor()
	 * @method static mixed getGrammar()
	 * @method static mixed useWritePdo()
	 * @method static mixed isQueryable($value)
	 * @method static mixed clone()
	 * @method static mixed cloneWithout(array $properties)
	 * @method static mixed cloneWithoutBindings(array $except)
	 * @method static mixed dump($args)
	 * @method static mixed dumpRawSql()
	 * @method static mixed dd()
	 * @method static mixed ddRawSql()
	 * @method static mixed wherePast($columns)
	 * @method static mixed whereNowOrPast($columns)
	 * @method static mixed orWherePast($columns)
	 * @method static mixed orWhereNowOrPast($columns)
	 * @method static mixed whereFuture($columns)
	 * @method static mixed whereNowOrFuture($columns)
	 * @method static mixed orWhereFuture($columns)
	 * @method static mixed orWhereNowOrFuture($columns)
	 * @method static mixed wherePastOrFuture($columns, $operator, $boolean)
	 * @method static mixed whereToday($columns, $boolean)
	 * @method static mixed whereBeforeToday($columns)
	 * @method static mixed whereTodayOrBefore($columns)
	 * @method static mixed whereAfterToday($columns)
	 * @method static mixed whereTodayOrAfter($columns)
	 * @method static mixed orWhereToday($columns)
	 * @method static mixed orWhereBeforeToday($columns)
	 * @method static mixed orWhereTodayOrBefore($columns)
	 * @method static mixed orWhereAfterToday($columns)
	 * @method static mixed orWhereTodayOrAfter($columns)
	 * @method static mixed whereTodayBeforeOrAfter($columns, $operator, $boolean)
	 * @method static mixed chunk($count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, $count)
	 * @method static mixed each(callable $callback, $count)
	 * @method static mixed chunkById($count, callable $callback, $column, $alias)
	 * @method static mixed chunkByIdDesc($count, callable $callback, $column, $alias)
	 * @method static mixed orderedChunkById($count, callable $callback, $column, $alias, $descending)
	 * @method static mixed eachById(callable $callback, $count, $column, $alias)
	 * @method static mixed lazy($chunkSize)
	 * @method static mixed lazyById($chunkSize, $column, $alias)
	 * @method static mixed lazyByIdDesc($chunkSize, $column, $alias)
	 * @method static mixed orderedLazyById($chunkSize, $column, $alias, $descending)
	 * @method static mixed first($columns)
	 * @method static mixed firstOrFail($columns, $message)
	 * @method static mixed sole($columns)
	 * @method static mixed paginateUsingCursor($perPage, $columns, $cursorName, $cursor)
	 * @method static mixed getOriginalColumnNameForCursorPagination($builder, string $parameter)
	 * @method static mixed paginator($items, $total, $perPage, $currentPage, $options)
	 * @method static mixed simplePaginator($items, $perPage, $currentPage, $options)
	 * @method static mixed cursorPaginator($items, $perPage, $cursor, $options)
	 * @method static mixed tap($callback)
	 * @method static mixed when($value, callable $callback, callable $default)
	 * @method static mixed unless($value, callable $callback, callable $default)
	 * @method static mixed explain()
	 * @method static mixed forwardCallTo($object, $method, $parameters)
	 * @method static mixed forwardDecoratedCallTo($object, $method, $parameters)
	 * @method static mixed throwBadMethodCallException($method)
	 * @method static mixed macro($name, $macro)
	 * @method static mixed mixin($mixin, $replace)
	 * @method static mixed hasMacro($name)
	 * @method static mixed flushMacros()
	 * @method static mixed macroCall($method, $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class make extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

}